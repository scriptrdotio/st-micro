var log = require("log");
var document = require("document");
var utils = require("app/entities/utils");
var deviceManager = require("app/entities/devicemanager");

function evaluateDevice(entry, prevEntry) {
		
    //Evaluate zoho ticketing
    var decisions = utils.executeDecisionTable("app/entities/rules/tickets/ticketingDecisionTable", entry);
	log.info("Zoho Decisions: "+JSON.stringify(decisions))
    var zohoAction = require("app/entities/actions/zoho/createTicket")

    var recordEvent = false;
    
    for(var i = 0; i< decisions.length; i++){
        //email and create zoho tickets based on decision table output
        zohoAction.execute(decisions[i], entry);
        
        if(decisions[i].RECORD_ENTRY == "true"){
            recordEvent = true;
        }
    }
    
    console.log("recordEvent Zoho: "+ recordEvent)
	log.info("rules  process started on email, sms on unlock, tampering, temperature");
    log.info(JSON.stringify(entry))
    
    var rules = require("app/entities/rules/apply");
    var temperatureDecisions = rules.process(entry, request);
    console.log("temperatureDecisions "+JSON.stringify(temperatureDecisions))
    for(var i = 0; i< temperatureDecisions.length; i++){
        if(temperatureDecisions[i].RECORD_ENTRY == "true"){
            recordEvent = true;
        }
    }
    
    console.log("recordEvent Temperature: "+ recordEvent)
    
    log.info("rules process done on email, sms on unlock, tampering, temperature: "+JSON.stringify(temperatureDecisions));
    
    
    if(entry.tampered == true || entry.state == "UNLOCKED") {
        recordEvent = true;
    }
    
    console.log("recordEvent: "+ recordEvent)
    
    
    var isSameEntry = function(prevEntry, entry) {
        
        if(!prevEntry) {
            return false;
        }
        
        var pre = JSON.parse(JSON.stringify(prevEntry))
        var curr = JSON.parse(JSON.stringify(entry))
        delete pre.by;
        delete pre.tamperedDate;
        delete pre.creationDate;
        
        delete curr.by;
        delete curr.tamperedDate;
        delete curr.creationDate;
        log.info("isSame entry: "+ JSON.stringify(pre) == JSON.stringify(curr))
        return JSON.stringify(pre) == JSON.stringify(curr);
    }
    
   
    if(!isSameEntry(prevEntry, entry) && recordEvent) {
        log.info("Store Event: "+ recordEvent)
        saveEventDocument(entry)
    }
    
    
}

function saveEventDocument(entry) {
    //Report Device Entry 
    entry["meta.types"] = {
        "batteryLevel": "numeric",
        "temperature": "numeric",
        "humidity": "numeric",
        "pressure": "numeric",
        "tamperDate": "date",
        "outsideTemperature": "numeric",
        "deviceEventDate": "date"
    }
	//record event in db
    var documentToSave =  JSON.parse(JSON.stringify(entry));
    documentToSave["deviceEventDate"] =  new Date(documentToSave["creationDate"])
    delete documentToSave["creationDate"]; //Restricted
    log.info("document entry: "+JSON.stringify(entry))
    log.info("Save: "+JSON.stringify(document.save(documentToSave)));
}