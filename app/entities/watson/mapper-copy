
//Define mappings between input keys and output keys
var mappings = {"myName":{"key":"myName","value":"function(value){return value;}"},"temperature":{"key":"A_Temperature","value":"function(value){return value;}"},"humidity":{"key":"A_Humidity","value":"function(value){return value;}"},"pressure":{"key":"A_Pressure","value":"function(value){return value;}"},"state":{"key":"Door","value":"function(value){return value.toUpperCase();}"},"fan":{"key":"Fan","value":"function(value){return value.toUpperCase();}"},"id":{"key":"deviceId","value":"function(value){return value;}"},"deviceType":{"key":"deviceType","value":"function(value){return value;}"},"Acc_X":{"key":"Acc_X","value":"function(value){return value;}"},"Acc_Y":{"key":"Acc_Y","value":"function(value){return value;}"},"Acc_Z":{"key":"Acc_Z","value":"function(value){return value;}"},"Mag_X":{"key":"MAG_X","value":"function(value){return value;}"},"Mag_Y":{"key":"MAG_Y","value":"function(value){return value;}"},"Mag_Z":{"key":"MAG_Z","value":"function(value){return value;}"}};    

var mapIt = function(params) {
    var values = JSON.flatten(params);
    var output = {}
    for (var key in mappings) {
      if (mappings.hasOwnProperty(key)) {
        var keyValue = values[mappings[key].key]; 
        var transformation = eval(mappings[key].value)
        output[key] = transformation(keyValue)
      }
    }
    return JSON.unflatten(output);
}

JSON.flatten = function (data) {
    var result = {};

    function recurse(cur, prop) {
        if (Object(cur) !== cur) {
            result[prop] = cur;
        } else if (Array.isArray(cur)) {
            for (var i = 0, l = cur.length; i < l; i++)
            recurse(cur[i], prop + "[" + i + "]");
            if (l == 0) result[prop] = [];
        } else {
            var isEmpty = true;
            for (var p in cur) {
                isEmpty = false;
                recurse(cur[p], prop ? prop + "." + p : p);
            }
            if (isEmpty && prop) result[prop] = {};
        }
    }
    recurse(data, "");
    return result;
};

JSON.unflatten = function (data) {
    "use strict";
    if (Object(data) !== data || Array.isArray(data)) return data;
    var regex = /\.?([^.\[\]]+)|\[(\d+)\]/g,
        resultholder = {};
    for (var p in data) {
        var cur = resultholder,
            prop = "",
            m;
        while (m = regex.exec(p)) {
            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));
            prop = m[2] || m[1];
        }
        cur[prop] = data[p];
    }
    return resultholder[""] || resultholder;
};
